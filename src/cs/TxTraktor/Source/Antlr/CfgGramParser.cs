//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CfgGram.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CfgGramParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, EXPRESSION_END=29, ONTOLOGY_SEPARATOR_PREFIX=30, 
		NUMBER=31, STARTS_BIG=32, CYRILLIC_STARTS_BIG=33, ALL_SMALL=34, CYRILLIC_ALL_SMALLL=35, 
		REG_STRING_VALUE=36, LEMMA_STRING_VALUE=37, MORPH_STRING_VALUE=38, STRING_VALUE=39, 
		EXTENTION_VALUE=40, LIST_POSTFIX=41, WS=42, COMMENT=43, LINE_COMMENT=44;
	public const int
		RULE_gram = 0, RULE_grammar_name = 1, RULE_grammar_lang = 2, RULE_imports = 3, 
		RULE_imprt = 4, RULE_grammar_import = 5, RULE_imp_src_grammar_name = 6, 
		RULE_imp_local_grammar_name = 7, RULE_nonterm_import = 8, RULE_imp_nonterm_elem = 9, 
		RULE_imp_src_nonterminal_name = 10, RULE_imp_local_nonterminal_name = 11, 
		RULE_rules = 12, RULE_rule = 13, RULE_rule_name = 14, RULE_rule_expression = 15, 
		RULE_rule_expression_list = 16, RULE_rule_extension_query = 17, RULE_rule_extention_query_text = 18, 
		RULE_rule_extention_type = 19, RULE_rule_item = 20, RULE_rule_item_head_flag = 21, 
		RULE_rule_item_main_key = 22, RULE_rule_inline_expression = 23, RULE_rule_item_static_main_key = 24, 
		RULE_rule_item_static_main_key_lemma = 25, RULE_rule_item_static_main_key_reg = 26, 
		RULE_rule_item_static_main_key_morph = 27, RULE_rule_item_static_main_key_string = 28, 
		RULE_rule_item_static_main_key_short_nonterm = 29, RULE_rule_item_static_main_key_full_nonterm = 30, 
		RULE_rule_item_variable_name = 31, RULE_rule_item_quote = 32, RULE_rule_item_counter = 33, 
		RULE_rule_item_plus_counter = 34, RULE_rule_item_star_counter = 35, RULE_rule_item_question_counter = 36, 
		RULE_rule_item_number_counter = 37, RULE_rule_item_number_counter_min = 38, 
		RULE_rule_item_number_counter_max = 39, RULE_rule_item_local_name = 40, 
		RULE_rule_item_conditions = 41, RULE_rule_item_condition = 42, RULE_rule_item_condition_negation = 43, 
		RULE_rule_item_condition_flag = 44, RULE_rule_item_condition_key_pair = 45, 
		RULE_rule_item_condition_key = 46, RULE_rule_item_condition_value_list = 47, 
		RULE_rule_item_condition_value = 48, RULE_rule_item_condition_value_literal = 49, 
		RULE_rule_item_condition_value_string = 50, RULE_rule_static_vars = 51, 
		RULE_rule_static_var = 52, RULE_rule_static_var_name = 53, RULE_rule_static_var_value = 54, 
		RULE_rule_static_string_value = 55, RULE_rule_static_integer_value = 56, 
		RULE_rule_static_float_value = 57, RULE_rule_static_bool_value = 58, RULE_rule_template = 59, 
		RULE_rule_template_member = 60, RULE_rule_template_member_key = 61, RULE_rule_template_member_value = 62, 
		RULE_rule_template_value = 63, RULE_rule_template_value_list = 64, RULE_rule_template_value_name_reference = 65, 
		RULE_rule_template_value_name_reference_key = 66, RULE_rule_template_value_name_reference_value = 67, 
		RULE_rule_template_value_number_reference = 68, RULE_rule_template_value_number_reference_key = 69, 
		RULE_rule_template_value_number_reference_value = 70, RULE_rule_template_value_string = 71, 
		RULE_rule_template_value_integer = 72, RULE_rule_template_value_float = 73, 
		RULE_rule_template_value_bool = 74, RULE_string_type_value = 75, RULE_integer_type_value = 76, 
		RULE_float_type_value = 77, RULE_bool_type_value = 78;
	public static readonly string[] ruleNames = {
		"gram", "grammar_name", "grammar_lang", "imports", "imprt", "grammar_import", 
		"imp_src_grammar_name", "imp_local_grammar_name", "nonterm_import", "imp_nonterm_elem", 
		"imp_src_nonterminal_name", "imp_local_nonterminal_name", "rules", "rule", 
		"rule_name", "rule_expression", "rule_expression_list", "rule_extension_query", 
		"rule_extention_query_text", "rule_extention_type", "rule_item", "rule_item_head_flag", 
		"rule_item_main_key", "rule_inline_expression", "rule_item_static_main_key", 
		"rule_item_static_main_key_lemma", "rule_item_static_main_key_reg", "rule_item_static_main_key_morph", 
		"rule_item_static_main_key_string", "rule_item_static_main_key_short_nonterm", 
		"rule_item_static_main_key_full_nonterm", "rule_item_variable_name", "rule_item_quote", 
		"rule_item_counter", "rule_item_plus_counter", "rule_item_star_counter", 
		"rule_item_question_counter", "rule_item_number_counter", "rule_item_number_counter_min", 
		"rule_item_number_counter_max", "rule_item_local_name", "rule_item_conditions", 
		"rule_item_condition", "rule_item_condition_negation", "rule_item_condition_flag", 
		"rule_item_condition_key_pair", "rule_item_condition_key", "rule_item_condition_value_list", 
		"rule_item_condition_value", "rule_item_condition_value_literal", "rule_item_condition_value_string", 
		"rule_static_vars", "rule_static_var", "rule_static_var_name", "rule_static_var_value", 
		"rule_static_string_value", "rule_static_integer_value", "rule_static_float_value", 
		"rule_static_bool_value", "rule_template", "rule_template_member", "rule_template_member_key", 
		"rule_template_member_value", "rule_template_value", "rule_template_value_list", 
		"rule_template_value_name_reference", "rule_template_value_name_reference_key", 
		"rule_template_value_name_reference_value", "rule_template_value_number_reference", 
		"rule_template_value_number_reference_key", "rule_template_value_number_reference_value", 
		"rule_template_value_string", "rule_template_value_integer", "rule_template_value_float", 
		"rule_template_value_bool", "string_type_value", "integer_type_value", 
		"float_type_value", "bool_type_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'grammar'", "'lang'", "'import'", "'as'", "'from'", "','", "'->'", 
		"'|'", "'<'", "'!'", "'('", "')'", "'$'", "'&q'", "'+'", "'*'", "'?'", 
		"'{'", "'}'", "'>'", "'~'", "'='", "'#set'", "'['", "']'", "'-'", "'true'", 
		"'false'", "';'", "'.'", null, null, null, null, null, null, null, null, 
		null, null, "'[]'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "EXPRESSION_END", "ONTOLOGY_SEPARATOR_PREFIX", 
		"NUMBER", "STARTS_BIG", "CYRILLIC_STARTS_BIG", "ALL_SMALL", "CYRILLIC_ALL_SMALLL", 
		"REG_STRING_VALUE", "LEMMA_STRING_VALUE", "MORPH_STRING_VALUE", "STRING_VALUE", 
		"EXTENTION_VALUE", "LIST_POSTFIX", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CfgGram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CfgGramParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CfgGramParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CfgGramParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GramContext : ParserRuleContext {
		public Grammar_nameContext grammar_name() {
			return GetRuleContext<Grammar_nameContext>(0);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(CfgGramParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(CfgGramParser.EXPRESSION_END, i);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public Grammar_langContext grammar_lang() {
			return GetRuleContext<Grammar_langContext>(0);
		}
		public ImportsContext imports() {
			return GetRuleContext<ImportsContext>(0);
		}
		public GramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gram; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterGram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitGram(this);
		}
	}

	[RuleVersion(0)]
	public GramContext gram() {
		GramContext _localctx = new GramContext(Context, State);
		EnterRule(_localctx, 0, RULE_gram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__0);
			State = 159; grammar_name();
			State = 160; Match(EXPRESSION_END);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 161; Match(T__1);
				State = 162; grammar_lang();
				State = 163; Match(EXPRESSION_END);
				}
			}

			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2 || _la==T__4) {
				{
				State = 167; imports();
				}
			}

			State = 170; rules();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_nameContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Grammar_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterGrammar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitGrammar_name(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_nameContext grammar_name() {
		Grammar_nameContext _localctx = new Grammar_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammar_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_langContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public Grammar_langContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_lang; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterGrammar_lang(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitGrammar_lang(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_langContext grammar_lang() {
		Grammar_langContext _localctx = new Grammar_langContext(Context, State);
		EnterRule(_localctx, 4, RULE_grammar_lang);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(ALL_SMALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		public ImprtContext[] imprt() {
			return GetRuleContexts<ImprtContext>();
		}
		public ImprtContext imprt(int i) {
			return GetRuleContext<ImprtContext>(i);
		}
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImports(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImports(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 6, RULE_imports);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 176; imprt();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__2 || _la==T__4 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImprtContext : ParserRuleContext {
		public Grammar_importContext grammar_import() {
			return GetRuleContext<Grammar_importContext>(0);
		}
		public Nonterm_importContext nonterm_import() {
			return GetRuleContext<Nonterm_importContext>(0);
		}
		public ImprtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imprt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImprt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImprt(this);
		}
	}

	[RuleVersion(0)]
	public ImprtContext imprt() {
		ImprtContext _localctx = new ImprtContext(Context, State);
		EnterRule(_localctx, 8, RULE_imprt);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; grammar_import();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; nonterm_import();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grammar_importContext : ParserRuleContext {
		public Imp_src_grammar_nameContext imp_src_grammar_name() {
			return GetRuleContext<Imp_src_grammar_nameContext>(0);
		}
		public ITerminalNode EXPRESSION_END() { return GetToken(CfgGramParser.EXPRESSION_END, 0); }
		public Imp_local_grammar_nameContext imp_local_grammar_name() {
			return GetRuleContext<Imp_local_grammar_nameContext>(0);
		}
		public Grammar_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterGrammar_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitGrammar_import(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_importContext grammar_import() {
		Grammar_importContext _localctx = new Grammar_importContext(Context, State);
		EnterRule(_localctx, 10, RULE_grammar_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__2);
			State = 186; imp_src_grammar_name();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 187; Match(T__3);
				State = 188; imp_local_grammar_name();
				}
			}

			State = 191; Match(EXPRESSION_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imp_src_grammar_nameContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Imp_src_grammar_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp_src_grammar_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImp_src_grammar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImp_src_grammar_name(this);
		}
	}

	[RuleVersion(0)]
	public Imp_src_grammar_nameContext imp_src_grammar_name() {
		Imp_src_grammar_nameContext _localctx = new Imp_src_grammar_nameContext(Context, State);
		EnterRule(_localctx, 12, RULE_imp_src_grammar_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imp_local_grammar_nameContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Imp_local_grammar_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp_local_grammar_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImp_local_grammar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImp_local_grammar_name(this);
		}
	}

	[RuleVersion(0)]
	public Imp_local_grammar_nameContext imp_local_grammar_name() {
		Imp_local_grammar_nameContext _localctx = new Imp_local_grammar_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_imp_local_grammar_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonterm_importContext : ParserRuleContext {
		public Imp_src_grammar_nameContext imp_src_grammar_name() {
			return GetRuleContext<Imp_src_grammar_nameContext>(0);
		}
		public Imp_nonterm_elemContext[] imp_nonterm_elem() {
			return GetRuleContexts<Imp_nonterm_elemContext>();
		}
		public Imp_nonterm_elemContext imp_nonterm_elem(int i) {
			return GetRuleContext<Imp_nonterm_elemContext>(i);
		}
		public ITerminalNode EXPRESSION_END() { return GetToken(CfgGramParser.EXPRESSION_END, 0); }
		public Nonterm_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonterm_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterNonterm_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitNonterm_import(this);
		}
	}

	[RuleVersion(0)]
	public Nonterm_importContext nonterm_import() {
		Nonterm_importContext _localctx = new Nonterm_importContext(Context, State);
		EnterRule(_localctx, 16, RULE_nonterm_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(T__4);
			State = 198; imp_src_grammar_name();
			State = 199; Match(T__2);
			State = 200; imp_nonterm_elem();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 201; Match(T__5);
				State = 202; imp_nonterm_elem();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208; Match(EXPRESSION_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imp_nonterm_elemContext : ParserRuleContext {
		public Imp_src_nonterminal_nameContext imp_src_nonterminal_name() {
			return GetRuleContext<Imp_src_nonterminal_nameContext>(0);
		}
		public Imp_local_nonterminal_nameContext imp_local_nonterminal_name() {
			return GetRuleContext<Imp_local_nonterminal_nameContext>(0);
		}
		public Imp_nonterm_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp_nonterm_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImp_nonterm_elem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImp_nonterm_elem(this);
		}
	}

	[RuleVersion(0)]
	public Imp_nonterm_elemContext imp_nonterm_elem() {
		Imp_nonterm_elemContext _localctx = new Imp_nonterm_elemContext(Context, State);
		EnterRule(_localctx, 18, RULE_imp_nonterm_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; imp_src_nonterminal_name();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 211; Match(T__3);
				State = 212; imp_local_nonterminal_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imp_src_nonterminal_nameContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Imp_src_nonterminal_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp_src_nonterminal_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImp_src_nonterminal_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImp_src_nonterminal_name(this);
		}
	}

	[RuleVersion(0)]
	public Imp_src_nonterminal_nameContext imp_src_nonterminal_name() {
		Imp_src_nonterminal_nameContext _localctx = new Imp_src_nonterminal_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_imp_src_nonterminal_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imp_local_nonterminal_nameContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Imp_local_nonterminal_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp_local_nonterminal_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterImp_local_nonterminal_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitImp_local_nonterminal_name(this);
		}
	}

	[RuleVersion(0)]
	public Imp_local_nonterminal_nameContext imp_local_nonterminal_name() {
		Imp_local_nonterminal_nameContext _localctx = new Imp_local_nonterminal_nameContext(Context, State);
		EnterRule(_localctx, 22, RULE_imp_local_nonterminal_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(CfgGramParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(CfgGramParser.EXPRESSION_END, i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 24, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 219; rule();
				State = 220; Match(EXPRESSION_END);
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STARTS_BIG );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public Rule_nameContext rule_name() {
			return GetRuleContext<Rule_nameContext>(0);
		}
		public Rule_expressionContext rule_expression() {
			return GetRuleContext<Rule_expressionContext>(0);
		}
		public Rule_expression_listContext rule_expression_list() {
			return GetRuleContext<Rule_expression_listContext>(0);
		}
		public Rule_templateContext rule_template() {
			return GetRuleContext<Rule_templateContext>(0);
		}
		public Rule_extension_queryContext rule_extension_query() {
			return GetRuleContext<Rule_extension_queryContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 26, RULE_rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; rule_name();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 227; rule_template();
				}
			}

			State = 230; Match(T__6);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 231; rule_extension_query();
				}
			}

			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 234; rule_expression();
				}
				break;
			case 2:
				{
				State = 235; rule_expression_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_nameContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Rule_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_name(this);
		}
	}

	[RuleVersion(0)]
	public Rule_nameContext rule_name() {
		Rule_nameContext _localctx = new Rule_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_rule_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_expressionContext : ParserRuleContext {
		public Rule_itemContext[] rule_item() {
			return GetRuleContexts<Rule_itemContext>();
		}
		public Rule_itemContext rule_item(int i) {
			return GetRuleContext<Rule_itemContext>(i);
		}
		public Rule_static_varsContext rule_static_vars() {
			return GetRuleContext<Rule_static_varsContext>(0);
		}
		public Rule_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_expression(this);
		}
	}

	[RuleVersion(0)]
	public Rule_expressionContext rule_expression() {
		Rule_expressionContext _localctx = new Rule_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_rule_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 240; rule_item();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__12) | (1L << T__13) | (1L << STARTS_BIG) | (1L << REG_STRING_VALUE) | (1L << LEMMA_STRING_VALUE) | (1L << MORPH_STRING_VALUE) | (1L << STRING_VALUE))) != 0) );
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 245; rule_static_vars();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_expression_listContext : ParserRuleContext {
		public Rule_expressionContext[] rule_expression() {
			return GetRuleContexts<Rule_expressionContext>();
		}
		public Rule_expressionContext rule_expression(int i) {
			return GetRuleContext<Rule_expressionContext>(i);
		}
		public Rule_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Rule_expression_listContext rule_expression_list() {
		Rule_expression_listContext _localctx = new Rule_expression_listContext(Context, State);
		EnterRule(_localctx, 32, RULE_rule_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; rule_expression();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 249; Match(T__7);
				State = 250; rule_expression();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__7 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_extension_queryContext : ParserRuleContext {
		public Rule_extention_typeContext rule_extention_type() {
			return GetRuleContext<Rule_extention_typeContext>(0);
		}
		public Rule_extention_query_textContext rule_extention_query_text() {
			return GetRuleContext<Rule_extention_query_textContext>(0);
		}
		public Rule_extension_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_extension_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_extension_query(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_extension_query(this);
		}
	}

	[RuleVersion(0)]
	public Rule_extension_queryContext rule_extension_query() {
		Rule_extension_queryContext _localctx = new Rule_extension_queryContext(Context, State);
		EnterRule(_localctx, 34, RULE_rule_extension_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(T__8);
			State = 256; rule_extention_type();
			State = 257; rule_extention_query_text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_extention_query_textContext : ParserRuleContext {
		public ITerminalNode EXTENTION_VALUE() { return GetToken(CfgGramParser.EXTENTION_VALUE, 0); }
		public Rule_extention_query_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_extention_query_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_extention_query_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_extention_query_text(this);
		}
	}

	[RuleVersion(0)]
	public Rule_extention_query_textContext rule_extention_query_text() {
		Rule_extention_query_textContext _localctx = new Rule_extention_query_textContext(Context, State);
		EnterRule(_localctx, 36, RULE_rule_extention_query_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(EXTENTION_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_extention_typeContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public Rule_extention_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_extention_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_extention_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_extention_type(this);
		}
	}

	[RuleVersion(0)]
	public Rule_extention_typeContext rule_extention_type() {
		Rule_extention_typeContext _localctx = new Rule_extention_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_rule_extention_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(ALL_SMALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_itemContext : ParserRuleContext {
		public Rule_item_main_keyContext rule_item_main_key() {
			return GetRuleContext<Rule_item_main_keyContext>(0);
		}
		public Rule_item_head_flagContext rule_item_head_flag() {
			return GetRuleContext<Rule_item_head_flagContext>(0);
		}
		public Rule_item_counterContext rule_item_counter() {
			return GetRuleContext<Rule_item_counterContext>(0);
		}
		public Rule_item_conditionsContext rule_item_conditions() {
			return GetRuleContext<Rule_item_conditionsContext>(0);
		}
		public Rule_item_local_nameContext rule_item_local_name() {
			return GetRuleContext<Rule_item_local_nameContext>(0);
		}
		public Rule_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item(this);
		}
	}

	[RuleVersion(0)]
	public Rule_itemContext rule_item() {
		Rule_itemContext _localctx = new Rule_itemContext(Context, State);
		EnterRule(_localctx, 40, RULE_rule_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 263; rule_item_head_flag();
				}
			}

			State = 266; rule_item_main_key();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
				{
				State = 267; rule_item_counter();
				}
			}

			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 270; rule_item_conditions();
				}
			}

			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 273; Match(T__3);
				State = 274; rule_item_local_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_head_flagContext : ParserRuleContext {
		public Rule_item_head_flagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_head_flag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_head_flag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_head_flag(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_head_flagContext rule_item_head_flag() {
		Rule_item_head_flagContext _localctx = new Rule_item_head_flagContext(Context, State);
		EnterRule(_localctx, 42, RULE_rule_item_head_flag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_main_keyContext : ParserRuleContext {
		public Rule_inline_expressionContext rule_inline_expression() {
			return GetRuleContext<Rule_inline_expressionContext>(0);
		}
		public Rule_item_static_main_keyContext rule_item_static_main_key() {
			return GetRuleContext<Rule_item_static_main_keyContext>(0);
		}
		public Rule_item_main_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_main_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_main_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_main_key(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_main_keyContext rule_item_main_key() {
		Rule_item_main_keyContext _localctx = new Rule_item_main_keyContext(Context, State);
		EnterRule(_localctx, 44, RULE_rule_item_main_key);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; rule_inline_expression();
				}
				break;
			case T__12:
			case T__13:
			case STARTS_BIG:
			case REG_STRING_VALUE:
			case LEMMA_STRING_VALUE:
			case MORPH_STRING_VALUE:
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; rule_item_static_main_key();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_inline_expressionContext : ParserRuleContext {
		public Rule_expressionContext rule_expression() {
			return GetRuleContext<Rule_expressionContext>(0);
		}
		public Rule_inline_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_inline_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_inline_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_inline_expression(this);
		}
	}

	[RuleVersion(0)]
	public Rule_inline_expressionContext rule_inline_expression() {
		Rule_inline_expressionContext _localctx = new Rule_inline_expressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_rule_inline_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(T__10);
			State = 284; rule_expression();
			State = 285; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_keyContext : ParserRuleContext {
		public Rule_item_static_main_key_lemmaContext rule_item_static_main_key_lemma() {
			return GetRuleContext<Rule_item_static_main_key_lemmaContext>(0);
		}
		public Rule_item_static_main_key_regContext rule_item_static_main_key_reg() {
			return GetRuleContext<Rule_item_static_main_key_regContext>(0);
		}
		public Rule_item_static_main_key_morphContext rule_item_static_main_key_morph() {
			return GetRuleContext<Rule_item_static_main_key_morphContext>(0);
		}
		public Rule_item_static_main_key_stringContext rule_item_static_main_key_string() {
			return GetRuleContext<Rule_item_static_main_key_stringContext>(0);
		}
		public Rule_item_static_main_key_short_nontermContext rule_item_static_main_key_short_nonterm() {
			return GetRuleContext<Rule_item_static_main_key_short_nontermContext>(0);
		}
		public Rule_item_static_main_key_full_nontermContext rule_item_static_main_key_full_nonterm() {
			return GetRuleContext<Rule_item_static_main_key_full_nontermContext>(0);
		}
		public Rule_item_variable_nameContext rule_item_variable_name() {
			return GetRuleContext<Rule_item_variable_nameContext>(0);
		}
		public Rule_item_quoteContext rule_item_quote() {
			return GetRuleContext<Rule_item_quoteContext>(0);
		}
		public Rule_item_static_main_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_keyContext rule_item_static_main_key() {
		Rule_item_static_main_keyContext _localctx = new Rule_item_static_main_keyContext(Context, State);
		EnterRule(_localctx, 48, RULE_rule_item_static_main_key);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287; rule_item_static_main_key_lemma();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288; rule_item_static_main_key_reg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 289; rule_item_static_main_key_morph();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 290; rule_item_static_main_key_string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 291; rule_item_static_main_key_short_nonterm();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 292; rule_item_static_main_key_full_nonterm();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 293; rule_item_variable_name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 294; rule_item_quote();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_key_lemmaContext : ParserRuleContext {
		public ITerminalNode LEMMA_STRING_VALUE() { return GetToken(CfgGramParser.LEMMA_STRING_VALUE, 0); }
		public Rule_item_static_main_key_lemmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key_lemma; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key_lemma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key_lemma(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_key_lemmaContext rule_item_static_main_key_lemma() {
		Rule_item_static_main_key_lemmaContext _localctx = new Rule_item_static_main_key_lemmaContext(Context, State);
		EnterRule(_localctx, 50, RULE_rule_item_static_main_key_lemma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(LEMMA_STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_key_regContext : ParserRuleContext {
		public ITerminalNode REG_STRING_VALUE() { return GetToken(CfgGramParser.REG_STRING_VALUE, 0); }
		public Rule_item_static_main_key_regContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key_reg; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key_reg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key_reg(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_key_regContext rule_item_static_main_key_reg() {
		Rule_item_static_main_key_regContext _localctx = new Rule_item_static_main_key_regContext(Context, State);
		EnterRule(_localctx, 52, RULE_rule_item_static_main_key_reg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(REG_STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_key_morphContext : ParserRuleContext {
		public ITerminalNode MORPH_STRING_VALUE() { return GetToken(CfgGramParser.MORPH_STRING_VALUE, 0); }
		public Rule_item_static_main_key_morphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key_morph; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key_morph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key_morph(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_key_morphContext rule_item_static_main_key_morph() {
		Rule_item_static_main_key_morphContext _localctx = new Rule_item_static_main_key_morphContext(Context, State);
		EnterRule(_localctx, 54, RULE_rule_item_static_main_key_morph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(MORPH_STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_key_stringContext : ParserRuleContext {
		public ITerminalNode STRING_VALUE() { return GetToken(CfgGramParser.STRING_VALUE, 0); }
		public Rule_item_static_main_key_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key_string(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_key_stringContext rule_item_static_main_key_string() {
		Rule_item_static_main_key_stringContext _localctx = new Rule_item_static_main_key_stringContext(Context, State);
		EnterRule(_localctx, 56, RULE_rule_item_static_main_key_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_key_short_nontermContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Rule_item_static_main_key_short_nontermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key_short_nonterm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key_short_nonterm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key_short_nonterm(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_key_short_nontermContext rule_item_static_main_key_short_nonterm() {
		Rule_item_static_main_key_short_nontermContext _localctx = new Rule_item_static_main_key_short_nontermContext(Context, State);
		EnterRule(_localctx, 58, RULE_rule_item_static_main_key_short_nonterm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_static_main_key_full_nontermContext : ParserRuleContext {
		public ITerminalNode[] STARTS_BIG() { return GetTokens(CfgGramParser.STARTS_BIG); }
		public ITerminalNode STARTS_BIG(int i) {
			return GetToken(CfgGramParser.STARTS_BIG, i);
		}
		public ITerminalNode ONTOLOGY_SEPARATOR_PREFIX() { return GetToken(CfgGramParser.ONTOLOGY_SEPARATOR_PREFIX, 0); }
		public Rule_item_static_main_key_full_nontermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_static_main_key_full_nonterm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_static_main_key_full_nonterm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_static_main_key_full_nonterm(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_static_main_key_full_nontermContext rule_item_static_main_key_full_nonterm() {
		Rule_item_static_main_key_full_nontermContext _localctx = new Rule_item_static_main_key_full_nontermContext(Context, State);
		EnterRule(_localctx, 60, RULE_rule_item_static_main_key_full_nonterm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(STARTS_BIG);
			State = 308; Match(ONTOLOGY_SEPARATOR_PREFIX);
			State = 309; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_variable_nameContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public Rule_item_variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_variable_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_variable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_variable_name(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_variable_nameContext rule_item_variable_name() {
		Rule_item_variable_nameContext _localctx = new Rule_item_variable_nameContext(Context, State);
		EnterRule(_localctx, 62, RULE_rule_item_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T__12);
			State = 312; Match(ALL_SMALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_quoteContext : ParserRuleContext {
		public Rule_item_quoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_quote; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_quote(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_quote(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_quoteContext rule_item_quote() {
		Rule_item_quoteContext _localctx = new Rule_item_quoteContext(Context, State);
		EnterRule(_localctx, 64, RULE_rule_item_quote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_counterContext : ParserRuleContext {
		public Rule_item_plus_counterContext rule_item_plus_counter() {
			return GetRuleContext<Rule_item_plus_counterContext>(0);
		}
		public Rule_item_star_counterContext rule_item_star_counter() {
			return GetRuleContext<Rule_item_star_counterContext>(0);
		}
		public Rule_item_question_counterContext rule_item_question_counter() {
			return GetRuleContext<Rule_item_question_counterContext>(0);
		}
		public Rule_item_number_counterContext rule_item_number_counter() {
			return GetRuleContext<Rule_item_number_counterContext>(0);
		}
		public Rule_item_counterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_counter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_counter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_counter(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_counterContext rule_item_counter() {
		Rule_item_counterContext _localctx = new Rule_item_counterContext(Context, State);
		EnterRule(_localctx, 66, RULE_rule_item_counter);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316; rule_item_plus_counter();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317; rule_item_star_counter();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; rule_item_question_counter();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319; rule_item_number_counter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_plus_counterContext : ParserRuleContext {
		public Rule_item_plus_counterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_plus_counter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_plus_counter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_plus_counter(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_plus_counterContext rule_item_plus_counter() {
		Rule_item_plus_counterContext _localctx = new Rule_item_plus_counterContext(Context, State);
		EnterRule(_localctx, 68, RULE_rule_item_plus_counter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_star_counterContext : ParserRuleContext {
		public Rule_item_star_counterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_star_counter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_star_counter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_star_counter(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_star_counterContext rule_item_star_counter() {
		Rule_item_star_counterContext _localctx = new Rule_item_star_counterContext(Context, State);
		EnterRule(_localctx, 70, RULE_rule_item_star_counter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_question_counterContext : ParserRuleContext {
		public Rule_item_question_counterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_question_counter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_question_counter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_question_counter(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_question_counterContext rule_item_question_counter() {
		Rule_item_question_counterContext _localctx = new Rule_item_question_counterContext(Context, State);
		EnterRule(_localctx, 72, RULE_rule_item_question_counter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_number_counterContext : ParserRuleContext {
		public Rule_item_number_counter_minContext rule_item_number_counter_min() {
			return GetRuleContext<Rule_item_number_counter_minContext>(0);
		}
		public Rule_item_number_counter_maxContext rule_item_number_counter_max() {
			return GetRuleContext<Rule_item_number_counter_maxContext>(0);
		}
		public Rule_item_number_counterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_number_counter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_number_counter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_number_counter(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_number_counterContext rule_item_number_counter() {
		Rule_item_number_counterContext _localctx = new Rule_item_number_counterContext(Context, State);
		EnterRule(_localctx, 74, RULE_rule_item_number_counter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(T__17);
			State = 329; rule_item_number_counter_min();
			State = 330; Match(T__5);
			State = 331; rule_item_number_counter_max();
			State = 332; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_number_counter_minContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(CfgGramParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(CfgGramParser.NUMBER, i);
		}
		public Rule_item_number_counter_minContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_number_counter_min; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_number_counter_min(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_number_counter_min(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_number_counter_minContext rule_item_number_counter_min() {
		Rule_item_number_counter_minContext _localctx = new Rule_item_number_counter_minContext(Context, State);
		EnterRule(_localctx, 76, RULE_rule_item_number_counter_min);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NUMBER) {
				{
				{
				State = 334; Match(NUMBER);
				}
				}
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_number_counter_maxContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(CfgGramParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(CfgGramParser.NUMBER, i);
		}
		public Rule_item_number_counter_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_number_counter_max; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_number_counter_max(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_number_counter_max(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_number_counter_maxContext rule_item_number_counter_max() {
		Rule_item_number_counter_maxContext _localctx = new Rule_item_number_counter_maxContext(Context, State);
		EnterRule(_localctx, 78, RULE_rule_item_number_counter_max);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 340; Match(NUMBER);
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_local_nameContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public Rule_item_local_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_local_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_local_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_local_name(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_local_nameContext rule_item_local_name() {
		Rule_item_local_nameContext _localctx = new Rule_item_local_nameContext(Context, State);
		EnterRule(_localctx, 80, RULE_rule_item_local_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; Match(ALL_SMALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_conditionsContext : ParserRuleContext {
		public Rule_item_conditionContext[] rule_item_condition() {
			return GetRuleContexts<Rule_item_conditionContext>();
		}
		public Rule_item_conditionContext rule_item_condition(int i) {
			return GetRuleContext<Rule_item_conditionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(CfgGramParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(CfgGramParser.EXPRESSION_END, i);
		}
		public Rule_item_conditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_conditions; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_conditions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_conditions(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_conditionsContext rule_item_conditions() {
		Rule_item_conditionsContext _localctx = new Rule_item_conditionsContext(Context, State);
		EnterRule(_localctx, 82, RULE_rule_item_conditions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(T__8);
			State = 348; rule_item_condition();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPRESSION_END) {
				{
				{
				State = 349; Match(EXPRESSION_END);
				State = 350; rule_item_condition();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 356; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_conditionContext : ParserRuleContext {
		public Rule_item_condition_flagContext rule_item_condition_flag() {
			return GetRuleContext<Rule_item_condition_flagContext>(0);
		}
		public Rule_item_condition_key_pairContext rule_item_condition_key_pair() {
			return GetRuleContext<Rule_item_condition_key_pairContext>(0);
		}
		public Rule_item_condition_negationContext rule_item_condition_negation() {
			return GetRuleContext<Rule_item_condition_negationContext>(0);
		}
		public Rule_item_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_conditionContext rule_item_condition() {
		Rule_item_conditionContext _localctx = new Rule_item_conditionContext(Context, State);
		EnterRule(_localctx, 84, RULE_rule_item_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 358; rule_item_condition_negation();
				}
			}

			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 361; rule_item_condition_flag();
				}
				break;
			case 2:
				{
				State = 362; rule_item_condition_key_pair();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_negationContext : ParserRuleContext {
		public Rule_item_condition_negationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_negation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_negation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_negation(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_negationContext rule_item_condition_negation() {
		Rule_item_condition_negationContext _localctx = new Rule_item_condition_negationContext(Context, State);
		EnterRule(_localctx, 86, RULE_rule_item_condition_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_flagContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public ITerminalNode CYRILLIC_ALL_SMALLL() { return GetToken(CfgGramParser.CYRILLIC_ALL_SMALLL, 0); }
		public Rule_item_condition_flagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_flag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_flag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_flag(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_flagContext rule_item_condition_flag() {
		Rule_item_condition_flagContext _localctx = new Rule_item_condition_flagContext(Context, State);
		EnterRule(_localctx, 88, RULE_rule_item_condition_flag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SMALL || _la==CYRILLIC_ALL_SMALLL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_key_pairContext : ParserRuleContext {
		public Rule_item_condition_keyContext rule_item_condition_key() {
			return GetRuleContext<Rule_item_condition_keyContext>(0);
		}
		public Rule_item_condition_valueContext rule_item_condition_value() {
			return GetRuleContext<Rule_item_condition_valueContext>(0);
		}
		public Rule_item_condition_value_listContext rule_item_condition_value_list() {
			return GetRuleContext<Rule_item_condition_value_listContext>(0);
		}
		public Rule_item_condition_key_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_key_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_key_pair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_key_pair(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_key_pairContext rule_item_condition_key_pair() {
		Rule_item_condition_key_pairContext _localctx = new Rule_item_condition_key_pairContext(Context, State);
		EnterRule(_localctx, 90, RULE_rule_item_condition_key_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; rule_item_condition_key();
			State = 370; Match(T__21);
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 371; rule_item_condition_value();
				}
				break;
			case 2:
				{
				State = 372; rule_item_condition_value_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_keyContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public ITerminalNode CYRILLIC_ALL_SMALLL() { return GetToken(CfgGramParser.CYRILLIC_ALL_SMALLL, 0); }
		public Rule_item_condition_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_key(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_keyContext rule_item_condition_key() {
		Rule_item_condition_keyContext _localctx = new Rule_item_condition_keyContext(Context, State);
		EnterRule(_localctx, 92, RULE_rule_item_condition_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SMALL || _la==CYRILLIC_ALL_SMALLL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_value_listContext : ParserRuleContext {
		public Rule_item_condition_valueContext[] rule_item_condition_value() {
			return GetRuleContexts<Rule_item_condition_valueContext>();
		}
		public Rule_item_condition_valueContext rule_item_condition_value(int i) {
			return GetRuleContext<Rule_item_condition_valueContext>(i);
		}
		public Rule_item_condition_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_value_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_value_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_value_listContext rule_item_condition_value_list() {
		Rule_item_condition_value_listContext _localctx = new Rule_item_condition_value_listContext(Context, State);
		EnterRule(_localctx, 94, RULE_rule_item_condition_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; rule_item_condition_value();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 378; Match(T__5);
				State = 379; rule_item_condition_value();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_valueContext : ParserRuleContext {
		public Rule_item_condition_value_literalContext rule_item_condition_value_literal() {
			return GetRuleContext<Rule_item_condition_value_literalContext>(0);
		}
		public Rule_item_condition_value_stringContext rule_item_condition_value_string() {
			return GetRuleContext<Rule_item_condition_value_stringContext>(0);
		}
		public Rule_item_condition_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_valueContext rule_item_condition_value() {
		Rule_item_condition_valueContext _localctx = new Rule_item_condition_valueContext(Context, State);
		EnterRule(_localctx, 96, RULE_rule_item_condition_value);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case ALL_SMALL:
			case CYRILLIC_ALL_SMALLL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 385; rule_item_condition_value_literal();
				}
				break;
			case STRING_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; rule_item_condition_value_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_value_literalContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public ITerminalNode NUMBER() { return GetToken(CfgGramParser.NUMBER, 0); }
		public ITerminalNode CYRILLIC_ALL_SMALLL() { return GetToken(CfgGramParser.CYRILLIC_ALL_SMALLL, 0); }
		public Rule_item_condition_value_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_value_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_value_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_value_literal(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_value_literalContext rule_item_condition_value_literal() {
		Rule_item_condition_value_literalContext _localctx = new Rule_item_condition_value_literalContext(Context, State);
		EnterRule(_localctx, 98, RULE_rule_item_condition_value_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << ALL_SMALL) | (1L << CYRILLIC_ALL_SMALLL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_item_condition_value_stringContext : ParserRuleContext {
		public String_type_valueContext string_type_value() {
			return GetRuleContext<String_type_valueContext>(0);
		}
		public Rule_item_condition_value_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_item_condition_value_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_item_condition_value_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_item_condition_value_string(this);
		}
	}

	[RuleVersion(0)]
	public Rule_item_condition_value_stringContext rule_item_condition_value_string() {
		Rule_item_condition_value_stringContext _localctx = new Rule_item_condition_value_stringContext(Context, State);
		EnterRule(_localctx, 100, RULE_rule_item_condition_value_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; string_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_varsContext : ParserRuleContext {
		public Rule_static_varContext[] rule_static_var() {
			return GetRuleContexts<Rule_static_varContext>();
		}
		public Rule_static_varContext rule_static_var(int i) {
			return GetRuleContext<Rule_static_varContext>(i);
		}
		public Rule_static_varsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_vars; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_vars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_vars(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_varsContext rule_static_vars() {
		Rule_static_varsContext _localctx = new Rule_static_varsContext(Context, State);
		EnterRule(_localctx, 102, RULE_rule_static_vars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 393; rule_static_var();
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__22 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_varContext : ParserRuleContext {
		public Rule_static_var_nameContext rule_static_var_name() {
			return GetRuleContext<Rule_static_var_nameContext>(0);
		}
		public Rule_static_var_valueContext rule_static_var_value() {
			return GetRuleContext<Rule_static_var_valueContext>(0);
		}
		public Rule_static_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_var(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_var(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_varContext rule_static_var() {
		Rule_static_varContext _localctx = new Rule_static_varContext(Context, State);
		EnterRule(_localctx, 104, RULE_rule_static_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T__22);
			State = 399; rule_static_var_name();
			State = 400; Match(T__21);
			State = 401; rule_static_var_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_var_nameContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public Rule_static_var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_var_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_var_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_var_name(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_var_nameContext rule_static_var_name() {
		Rule_static_var_nameContext _localctx = new Rule_static_var_nameContext(Context, State);
		EnterRule(_localctx, 106, RULE_rule_static_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(ALL_SMALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_var_valueContext : ParserRuleContext {
		public Rule_static_string_valueContext rule_static_string_value() {
			return GetRuleContext<Rule_static_string_valueContext>(0);
		}
		public Rule_static_integer_valueContext rule_static_integer_value() {
			return GetRuleContext<Rule_static_integer_valueContext>(0);
		}
		public Rule_static_float_valueContext rule_static_float_value() {
			return GetRuleContext<Rule_static_float_valueContext>(0);
		}
		public Rule_static_bool_valueContext rule_static_bool_value() {
			return GetRuleContext<Rule_static_bool_valueContext>(0);
		}
		public Rule_static_var_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_var_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_var_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_var_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_var_valueContext rule_static_var_value() {
		Rule_static_var_valueContext _localctx = new Rule_static_var_valueContext(Context, State);
		EnterRule(_localctx, 108, RULE_rule_static_var_value);
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; rule_static_string_value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; rule_static_integer_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 407; rule_static_float_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 408; rule_static_bool_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_string_valueContext : ParserRuleContext {
		public String_type_valueContext string_type_value() {
			return GetRuleContext<String_type_valueContext>(0);
		}
		public Rule_static_string_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_string_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_string_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_string_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_string_valueContext rule_static_string_value() {
		Rule_static_string_valueContext _localctx = new Rule_static_string_valueContext(Context, State);
		EnterRule(_localctx, 110, RULE_rule_static_string_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; string_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_integer_valueContext : ParserRuleContext {
		public Integer_type_valueContext integer_type_value() {
			return GetRuleContext<Integer_type_valueContext>(0);
		}
		public Rule_static_integer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_integer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_integer_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_integer_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_integer_valueContext rule_static_integer_value() {
		Rule_static_integer_valueContext _localctx = new Rule_static_integer_valueContext(Context, State);
		EnterRule(_localctx, 112, RULE_rule_static_integer_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; integer_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_float_valueContext : ParserRuleContext {
		public Float_type_valueContext float_type_value() {
			return GetRuleContext<Float_type_valueContext>(0);
		}
		public Rule_static_float_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_float_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_float_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_float_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_float_valueContext rule_static_float_value() {
		Rule_static_float_valueContext _localctx = new Rule_static_float_valueContext(Context, State);
		EnterRule(_localctx, 114, RULE_rule_static_float_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; float_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_static_bool_valueContext : ParserRuleContext {
		public Bool_type_valueContext bool_type_value() {
			return GetRuleContext<Bool_type_valueContext>(0);
		}
		public Rule_static_bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_static_bool_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_static_bool_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_static_bool_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_static_bool_valueContext rule_static_bool_value() {
		Rule_static_bool_valueContext _localctx = new Rule_static_bool_valueContext(Context, State);
		EnterRule(_localctx, 116, RULE_rule_static_bool_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; bool_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_templateContext : ParserRuleContext {
		public Rule_template_memberContext[] rule_template_member() {
			return GetRuleContexts<Rule_template_memberContext>();
		}
		public Rule_template_memberContext rule_template_member(int i) {
			return GetRuleContext<Rule_template_memberContext>(i);
		}
		public Rule_templateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template(this);
		}
	}

	[RuleVersion(0)]
	public Rule_templateContext rule_template() {
		Rule_templateContext _localctx = new Rule_templateContext(Context, State);
		EnterRule(_localctx, 118, RULE_rule_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(T__23);
			State = 420; rule_template_member();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 421; Match(T__5);
				State = 422; rule_template_member();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 428; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_memberContext : ParserRuleContext {
		public Rule_template_member_keyContext rule_template_member_key() {
			return GetRuleContext<Rule_template_member_keyContext>(0);
		}
		public Rule_template_member_valueContext rule_template_member_value() {
			return GetRuleContext<Rule_template_member_valueContext>(0);
		}
		public Rule_template_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_member(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_memberContext rule_template_member() {
		Rule_template_memberContext _localctx = new Rule_template_memberContext(Context, State);
		EnterRule(_localctx, 120, RULE_rule_template_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; rule_template_member_key();
			State = 431; Match(T__21);
			State = 432; rule_template_member_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_member_keyContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Rule_template_member_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_member_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_member_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_member_key(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_member_keyContext rule_template_member_key() {
		Rule_template_member_keyContext _localctx = new Rule_template_member_keyContext(Context, State);
		EnterRule(_localctx, 122, RULE_rule_template_member_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_member_valueContext : ParserRuleContext {
		public Rule_template_valueContext rule_template_value() {
			return GetRuleContext<Rule_template_valueContext>(0);
		}
		public Rule_template_member_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_member_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_member_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_member_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_member_valueContext rule_template_member_value() {
		Rule_template_member_valueContext _localctx = new Rule_template_member_valueContext(Context, State);
		EnterRule(_localctx, 124, RULE_rule_template_member_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; rule_template_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_valueContext : ParserRuleContext {
		public Rule_template_value_listContext rule_template_value_list() {
			return GetRuleContext<Rule_template_value_listContext>(0);
		}
		public Rule_template_value_name_referenceContext rule_template_value_name_reference() {
			return GetRuleContext<Rule_template_value_name_referenceContext>(0);
		}
		public Rule_template_value_number_referenceContext rule_template_value_number_reference() {
			return GetRuleContext<Rule_template_value_number_referenceContext>(0);
		}
		public Rule_template_value_stringContext rule_template_value_string() {
			return GetRuleContext<Rule_template_value_stringContext>(0);
		}
		public Rule_template_value_integerContext rule_template_value_integer() {
			return GetRuleContext<Rule_template_value_integerContext>(0);
		}
		public Rule_template_value_floatContext rule_template_value_float() {
			return GetRuleContext<Rule_template_value_floatContext>(0);
		}
		public Rule_template_value_boolContext rule_template_value_bool() {
			return GetRuleContext<Rule_template_value_boolContext>(0);
		}
		public Rule_template_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_valueContext rule_template_value() {
		Rule_template_valueContext _localctx = new Rule_template_valueContext(Context, State);
		EnterRule(_localctx, 126, RULE_rule_template_value);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; rule_template_value_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; rule_template_value_name_reference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440; rule_template_value_number_reference();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 441; rule_template_value_string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 442; rule_template_value_integer();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 443; rule_template_value_float();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 444; rule_template_value_bool();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_listContext : ParserRuleContext {
		public Rule_template_valueContext[] rule_template_value() {
			return GetRuleContexts<Rule_template_valueContext>();
		}
		public Rule_template_valueContext rule_template_value(int i) {
			return GetRuleContext<Rule_template_valueContext>(i);
		}
		public Rule_template_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_listContext rule_template_value_list() {
		Rule_template_value_listContext _localctx = new Rule_template_value_listContext(Context, State);
		EnterRule(_localctx, 128, RULE_rule_template_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T__17);
			State = 448; rule_template_value();
			State = 451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 449; Match(T__5);
				State = 450; rule_template_value();
				}
				}
				State = 453;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__5 );
			State = 455; Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_name_referenceContext : ParserRuleContext {
		public Rule_template_value_name_reference_keyContext rule_template_value_name_reference_key() {
			return GetRuleContext<Rule_template_value_name_reference_keyContext>(0);
		}
		public ITerminalNode ONTOLOGY_SEPARATOR_PREFIX() { return GetToken(CfgGramParser.ONTOLOGY_SEPARATOR_PREFIX, 0); }
		public Rule_template_value_name_reference_valueContext rule_template_value_name_reference_value() {
			return GetRuleContext<Rule_template_value_name_reference_valueContext>(0);
		}
		public Rule_template_value_name_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_name_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_name_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_name_reference(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_name_referenceContext rule_template_value_name_reference() {
		Rule_template_value_name_referenceContext _localctx = new Rule_template_value_name_referenceContext(Context, State);
		EnterRule(_localctx, 130, RULE_rule_template_value_name_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__12);
			State = 458; rule_template_value_name_reference_key();
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONTOLOGY_SEPARATOR_PREFIX) {
				{
				State = 459; Match(ONTOLOGY_SEPARATOR_PREFIX);
				State = 460; rule_template_value_name_reference_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_name_reference_keyContext : ParserRuleContext {
		public ITerminalNode ALL_SMALL() { return GetToken(CfgGramParser.ALL_SMALL, 0); }
		public Rule_template_value_name_reference_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_name_reference_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_name_reference_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_name_reference_key(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_name_reference_keyContext rule_template_value_name_reference_key() {
		Rule_template_value_name_reference_keyContext _localctx = new Rule_template_value_name_reference_keyContext(Context, State);
		EnterRule(_localctx, 132, RULE_rule_template_value_name_reference_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(ALL_SMALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_name_reference_valueContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Rule_template_value_name_reference_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_name_reference_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_name_reference_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_name_reference_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_name_reference_valueContext rule_template_value_name_reference_value() {
		Rule_template_value_name_reference_valueContext _localctx = new Rule_template_value_name_reference_valueContext(Context, State);
		EnterRule(_localctx, 134, RULE_rule_template_value_name_reference_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_number_referenceContext : ParserRuleContext {
		public Rule_template_value_number_reference_keyContext rule_template_value_number_reference_key() {
			return GetRuleContext<Rule_template_value_number_reference_keyContext>(0);
		}
		public ITerminalNode ONTOLOGY_SEPARATOR_PREFIX() { return GetToken(CfgGramParser.ONTOLOGY_SEPARATOR_PREFIX, 0); }
		public Rule_template_value_number_reference_valueContext rule_template_value_number_reference_value() {
			return GetRuleContext<Rule_template_value_number_reference_valueContext>(0);
		}
		public Rule_template_value_number_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_number_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_number_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_number_reference(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_number_referenceContext rule_template_value_number_reference() {
		Rule_template_value_number_referenceContext _localctx = new Rule_template_value_number_referenceContext(Context, State);
		EnterRule(_localctx, 136, RULE_rule_template_value_number_reference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(T__12);
			State = 468; rule_template_value_number_reference_key();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONTOLOGY_SEPARATOR_PREFIX) {
				{
				State = 469; Match(ONTOLOGY_SEPARATOR_PREFIX);
				State = 470; rule_template_value_number_reference_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_number_reference_keyContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(CfgGramParser.NUMBER, 0); }
		public Rule_template_value_number_reference_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_number_reference_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_number_reference_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_number_reference_key(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_number_reference_keyContext rule_template_value_number_reference_key() {
		Rule_template_value_number_reference_keyContext _localctx = new Rule_template_value_number_reference_keyContext(Context, State);
		EnterRule(_localctx, 138, RULE_rule_template_value_number_reference_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_number_reference_valueContext : ParserRuleContext {
		public ITerminalNode STARTS_BIG() { return GetToken(CfgGramParser.STARTS_BIG, 0); }
		public Rule_template_value_number_reference_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_number_reference_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_number_reference_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_number_reference_value(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_number_reference_valueContext rule_template_value_number_reference_value() {
		Rule_template_value_number_reference_valueContext _localctx = new Rule_template_value_number_reference_valueContext(Context, State);
		EnterRule(_localctx, 140, RULE_rule_template_value_number_reference_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(STARTS_BIG);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_stringContext : ParserRuleContext {
		public String_type_valueContext string_type_value() {
			return GetRuleContext<String_type_valueContext>(0);
		}
		public Rule_template_value_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_string(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_stringContext rule_template_value_string() {
		Rule_template_value_stringContext _localctx = new Rule_template_value_stringContext(Context, State);
		EnterRule(_localctx, 142, RULE_rule_template_value_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; string_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_integerContext : ParserRuleContext {
		public Integer_type_valueContext integer_type_value() {
			return GetRuleContext<Integer_type_valueContext>(0);
		}
		public Rule_template_value_integerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_integer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_integer(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_integerContext rule_template_value_integer() {
		Rule_template_value_integerContext _localctx = new Rule_template_value_integerContext(Context, State);
		EnterRule(_localctx, 144, RULE_rule_template_value_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; integer_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_floatContext : ParserRuleContext {
		public Float_type_valueContext float_type_value() {
			return GetRuleContext<Float_type_valueContext>(0);
		}
		public Rule_template_value_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_float; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_float(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_float(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_floatContext rule_template_value_float() {
		Rule_template_value_floatContext _localctx = new Rule_template_value_floatContext(Context, State);
		EnterRule(_localctx, 146, RULE_rule_template_value_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; float_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_template_value_boolContext : ParserRuleContext {
		public Bool_type_valueContext bool_type_value() {
			return GetRuleContext<Bool_type_valueContext>(0);
		}
		public Rule_template_value_boolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_template_value_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterRule_template_value_bool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitRule_template_value_bool(this);
		}
	}

	[RuleVersion(0)]
	public Rule_template_value_boolContext rule_template_value_bool() {
		Rule_template_value_boolContext _localctx = new Rule_template_value_boolContext(Context, State);
		EnterRule(_localctx, 148, RULE_rule_template_value_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; bool_type_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_type_valueContext : ParserRuleContext {
		public ITerminalNode STRING_VALUE() { return GetToken(CfgGramParser.STRING_VALUE, 0); }
		public String_type_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_type_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterString_type_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitString_type_value(this);
		}
	}

	[RuleVersion(0)]
	public String_type_valueContext string_type_value() {
		String_type_valueContext _localctx = new String_type_valueContext(Context, State);
		EnterRule(_localctx, 150, RULE_string_type_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(STRING_VALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_type_valueContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(CfgGramParser.NUMBER, 0); }
		public Integer_type_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_type_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterInteger_type_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitInteger_type_value(this);
		}
	}

	[RuleVersion(0)]
	public Integer_type_valueContext integer_type_value() {
		Integer_type_valueContext _localctx = new Integer_type_valueContext(Context, State);
		EnterRule(_localctx, 152, RULE_integer_type_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 487; Match(T__25);
				}
			}

			State = 490; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Float_type_valueContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(CfgGramParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(CfgGramParser.NUMBER, i);
		}
		public ITerminalNode ONTOLOGY_SEPARATOR_PREFIX() { return GetToken(CfgGramParser.ONTOLOGY_SEPARATOR_PREFIX, 0); }
		public Float_type_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float_type_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterFloat_type_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitFloat_type_value(this);
		}
	}

	[RuleVersion(0)]
	public Float_type_valueContext float_type_value() {
		Float_type_valueContext _localctx = new Float_type_valueContext(Context, State);
		EnterRule(_localctx, 154, RULE_float_type_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__25) {
				{
				State = 492; Match(T__25);
				}
			}

			State = 495; Match(NUMBER);
			State = 496; Match(ONTOLOGY_SEPARATOR_PREFIX);
			State = 497; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_type_valueContext : ParserRuleContext {
		public Bool_type_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_type_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.EnterBool_type_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfgGramListener typedListener = listener as ICfgGramListener;
			if (typedListener != null) typedListener.ExitBool_type_value(this);
		}
	}

	[RuleVersion(0)]
	public Bool_type_valueContext bool_type_value() {
		Bool_type_valueContext _localctx = new Bool_type_valueContext(Context, State);
		EnterRule(_localctx, 156, RULE_bool_type_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\x1F8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', '\xA8', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\xAB', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '\xB4', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '\xB5', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xBA', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\xC0', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xCE', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\xD1', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD8', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\xE1', '\n', '\xE', 
		'\r', '\xE', '\xE', '\xE', '\xE2', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xE7', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xEB', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xEF', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x6', '\x11', 
		'\xF4', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xF5', '\x3', '\x11', 
		'\x5', '\x11', '\xF9', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x6', '\x12', '\xFE', '\n', '\x12', '\r', '\x12', '\xE', '\x12', 
		'\xFF', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', 
		'\x16', '\x10B', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x10F', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x112', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x116', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x11C', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x12A', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x5', '#', '\x143', '\n', '#', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\a', 
		'(', '\x152', '\n', '(', '\f', '(', '\xE', '(', '\x155', '\v', '(', '\x3', 
		')', '\x6', ')', '\x158', '\n', ')', '\r', ')', '\xE', ')', '\x159', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', 
		'+', '\x162', '\n', '+', '\f', '+', '\xE', '+', '\x165', '\v', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x5', ',', '\x16A', '\n', ',', '\x3', ',', 
		'\x3', ',', '\x5', ',', '\x16E', '\n', ',', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x178', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x17F', '\n', '\x31', '\f', 
		'\x31', '\xE', '\x31', '\x182', '\v', '\x31', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x186', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x35', '\x6', '\x35', '\x18D', '\n', '\x35', 
		'\r', '\x35', '\xE', '\x35', '\x18E', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x19C', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', 
		';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\a', '=', '\x1AA', '\n', '=', '\f', '=', '\xE', '=', 
		'\x1AD', '\v', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x1C0', '\n', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x6', '\x42', '\x1C6', '\n', 
		'\x42', '\r', '\x42', '\xE', '\x42', '\x1C7', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x1D0', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', 
		'\x46', '\x1DA', '\n', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 
		'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x5', 
		'N', '\x1EB', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x5', 'O', 
		'\x1F0', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x2', '\x2', 'Q', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\x2', '\x5', '\x3', '\x2', 
		'$', '%', '\x4', '\x2', '!', '!', '$', '%', '\x3', '\x2', '\x1D', '\x1E', 
		'\x2', '\x1DD', '\x2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x4', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xB3', '\x3', '\x2', '\x2', '\x2', '\n', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xE', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xC7', '\x3', '\x2', '\x2', '\x2', '\x14', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xF3', '\x3', '\x2', '\x2', '\x2', '\"', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x101', '\x3', '\x2', '\x2', '\x2', '&', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x10A', '\x3', '\x2', '\x2', '\x2', ',', '\x117', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x30', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x12F', '\x3', '\x2', '\x2', '\x2', ':', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x135', '\x3', '\x2', '\x2', '\x2', '@', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x44', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x146', '\x3', '\x2', '\x2', '\x2', 'J', '\x148', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x14A', '\x3', '\x2', '\x2', '\x2', 'N', '\x153', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x15B', '\x3', '\x2', '\x2', '\x2', 'T', '\x15D', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x169', '\x3', '\x2', '\x2', '\x2', 'X', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x173', '\x3', '\x2', '\x2', '\x2', '^', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x62', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x189', '\x3', '\x2', '\x2', '\x2', 'h', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x190', '\x3', '\x2', '\x2', '\x2', 'l', '\x195', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x19D', '\x3', '\x2', '\x2', '\x2', 'r', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x1A1', '\x3', '\x2', '\x2', '\x2', 'v', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x1B0', '\x3', '\x2', '\x2', '\x2', '|', '\x1B4', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x80', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x86', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x90', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x94', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x1EA', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x3', '\x2', '\x2', 
		'\xA1', '\xA2', '\x5', '\x4', '\x3', '\x2', '\xA2', '\xA7', '\a', '\x1F', 
		'\x2', '\x2', '\xA3', '\xA4', '\a', '\x4', '\x2', '\x2', '\xA4', '\xA5', 
		'\x5', '\x6', '\x4', '\x2', '\xA5', '\xA6', '\a', '\x1F', '\x2', '\x2', 
		'\xA6', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAB', '\x5', '\b', '\x5', '\x2', 
		'\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\x5', '\x1A', '\xE', '\x2', '\xAD', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xAF', '\a', '\"', '\x2', '\x2', '\xAF', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\a', '$', '\x2', '\x2', '\xB1', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB4', '\x5', '\n', '\x6', '\x2', '\xB3', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\t', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xBA', '\x5', '\f', '\a', '\x2', '\xB8', '\xBA', '\x5', '\x12', '\n', 
		'\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\v', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\x5', '\x2', '\x2', '\xBC', '\xBF', '\x5', '\xE', '\b', 
		'\x2', '\xBD', '\xBE', '\a', '\x6', '\x2', '\x2', '\xBE', '\xC0', '\x5', 
		'\x10', '\t', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\x1F', '\x2', '\x2', '\xC2', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\"', '\x2', '\x2', '\xC4', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\"', '\x2', 
		'\x2', '\xC6', '\x11', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'\a', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\xE', '\b', '\x2', '\xC9', 
		'\xCA', '\a', '\x5', '\x2', '\x2', '\xCA', '\xCF', '\x5', '\x14', '\v', 
		'\x2', '\xCB', '\xCC', '\a', '\b', '\x2', '\x2', '\xCC', '\xCE', '\x5', 
		'\x14', '\v', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\a', '\x1F', '\x2', '\x2', '\xD3', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD7', '\x5', '\x16', '\f', '\x2', '\xD5', '\xD6', '\a', 
		'\x6', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x18', '\r', '\x2', '\xD7', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\x15', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'\"', '\x2', '\x2', '\xDA', '\x17', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\a', '\"', '\x2', '\x2', '\xDC', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x5', '\x1C', '\xF', '\x2', '\xDE', '\xDF', '\a', 
		'\x1F', '\x2', '\x2', '\xDF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE6', '\x5', '\x1E', '\x10', '\x2', '\xE5', '\xE7', '\x5', 'x', '=', 
		'\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEA', '\a', '\t', '\x2', '\x2', '\xE9', '\xEB', '\x5', '$', '\x13', 
		'\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xEF', '\x5', ' ', '\x11', '\x2', '\xED', '\xEF', '\x5', '\"', '\x12', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\"', '\x2', '\x2', '\xF1', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF4', '\x5', '*', '\x16', '\x2', '\xF3', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\x5', 
		'h', '\x35', '\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFD', '\x5', ' ', '\x11', '\x2', '\xFB', '\xFC', '\a', 
		'\n', '\x2', '\x2', '\xFC', '\xFE', '\x5', ' ', '\x11', '\x2', '\xFD', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '#', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\v', '\x2', '\x2', '\x102', '\x103', '\x5', '(', '\x15', 
		'\x2', '\x103', '\x104', '\x5', '&', '\x14', '\x2', '\x104', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\a', '*', '\x2', '\x2', '\x106', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', '$', '\x2', 
		'\x2', '\x108', ')', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', '\x5', 
		',', '\x17', '\x2', '\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10E', '\x5', '.', '\x18', '\x2', '\x10D', '\x10F', 
		'\x5', '\x44', '#', '\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x112', '\x5', 'T', '+', '\x2', '\x111', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x115', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\x6', '\x2', '\x2', '\x114', '\x116', '\x5', 'R', '*', '\x2', '\x115', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '+', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', 
		'\f', '\x2', '\x2', '\x118', '-', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11C', '\x5', '\x30', '\x19', '\x2', '\x11A', '\x11C', '\x5', '\x32', 
		'\x1A', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\a', '\r', '\x2', '\x2', '\x11E', '\x11F', '\x5', 
		' ', '\x11', '\x2', '\x11F', '\x120', '\a', '\xE', '\x2', '\x2', '\x120', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x121', '\x12A', '\x5', '\x34', '\x1B', 
		'\x2', '\x122', '\x12A', '\x5', '\x36', '\x1C', '\x2', '\x123', '\x12A', 
		'\x5', '\x38', '\x1D', '\x2', '\x124', '\x12A', '\x5', ':', '\x1E', '\x2', 
		'\x125', '\x12A', '\x5', '<', '\x1F', '\x2', '\x126', '\x12A', '\x5', 
		'>', ' ', '\x2', '\x127', '\x12A', '\x5', '@', '!', '\x2', '\x128', '\x12A', 
		'\x5', '\x42', '\"', '\x2', '\x129', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x122', '\x3', '\x2', '\x2', '\x2', '\x129', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x124', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x129', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\a', '\'', '\x2', '\x2', '\x12C', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x12D', '\x12E', '\a', '&', '\x2', '\x2', '\x12E', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\a', '(', '\x2', '\x2', 
		'\x130', '\x39', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', ')', 
		'\x2', '\x2', '\x132', ';', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', 
		'\a', '\"', '\x2', '\x2', '\x134', '=', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x136', '\a', '\"', '\x2', '\x2', '\x136', '\x137', '\a', ' ', '\x2', 
		'\x2', '\x137', '\x138', '\a', '\"', '\x2', '\x2', '\x138', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '\xF', '\x2', '\x2', '\x13A', 
		'\x13B', '\a', '$', '\x2', '\x2', '\x13B', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\a', '\x10', '\x2', '\x2', '\x13D', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x143', '\x5', '\x46', '$', '\x2', 
		'\x13F', '\x143', '\x5', 'H', '%', '\x2', '\x140', '\x143', '\x5', 'J', 
		'&', '\x2', '\x141', '\x143', '\x5', 'L', '\'', '\x2', '\x142', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x45', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\a', '\x11', '\x2', '\x2', '\x145', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x147', '\a', '\x12', '\x2', '\x2', '\x147', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\a', '\x13', '\x2', '\x2', '\x149', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '\x14', '\x2', 
		'\x2', '\x14B', '\x14C', '\x5', 'N', '(', '\x2', '\x14C', '\x14D', '\a', 
		'\b', '\x2', '\x2', '\x14D', '\x14E', '\x5', 'P', ')', '\x2', '\x14E', 
		'\x14F', '\a', '\x15', '\x2', '\x2', '\x14F', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x152', '\a', '!', '\x2', '\x2', '\x151', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x155', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x154', 'O', '\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x158', '\a', '!', '\x2', '\x2', '\x157', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\a', '$', '\x2', '\x2', '\x15C', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x15D', '\x15E', '\a', '\v', '\x2', '\x2', '\x15E', '\x163', 
		'\x5', 'V', ',', '\x2', '\x15F', '\x160', '\a', '\x1F', '\x2', '\x2', 
		'\x160', '\x162', '\x5', 'V', ',', '\x2', '\x161', '\x15F', '\x3', '\x2', 
		'\x2', '\x2', '\x162', '\x165', '\x3', '\x2', '\x2', '\x2', '\x163', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x166', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x16', '\x2', '\x2', '\x167', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16A', '\x5', 'X', '-', '\x2', 
		'\x169', '\x168', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16E', '\x5', 'Z', '.', '\x2', '\x16C', '\x16E', '\x5', '\\', '/', '\x2', 
		'\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16C', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', 'W', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\a', '\x17', '\x2', '\x2', '\x170', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x172', '\t', '\x2', '\x2', '\x2', '\x172', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x174', '\x5', '^', '\x30', '\x2', '\x174', 
		'\x177', '\a', '\x18', '\x2', '\x2', '\x175', '\x178', '\x5', '\x62', 
		'\x32', '\x2', '\x176', '\x178', '\x5', '`', '\x31', '\x2', '\x177', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x178', ']', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\t', '\x2', 
		'\x2', '\x2', '\x17A', '_', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x180', 
		'\x5', '\x62', '\x32', '\x2', '\x17C', '\x17D', '\a', '\b', '\x2', '\x2', 
		'\x17D', '\x17F', '\x5', '\x62', '\x32', '\x2', '\x17E', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17F', '\x182', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x61', '\x3', '\x2', '\x2', '\x2', '\x182', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x5', '\x64', '\x33', '\x2', 
		'\x184', '\x186', '\x5', '\x66', '\x34', '\x2', '\x185', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\t', '\x3', '\x2', 
		'\x2', '\x188', '\x65', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', 
		'\x5', '\x98', 'M', '\x2', '\x18A', 'g', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x18D', '\x5', 'j', '\x36', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', 'i', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\a', '\x19', 
		'\x2', '\x2', '\x191', '\x192', '\x5', 'l', '\x37', '\x2', '\x192', '\x193', 
		'\a', '\x18', '\x2', '\x2', '\x193', '\x194', '\x5', 'n', '\x38', '\x2', 
		'\x194', 'k', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\a', '$', 
		'\x2', '\x2', '\x196', 'm', '\x3', '\x2', '\x2', '\x2', '\x197', '\x19C', 
		'\x5', 'p', '\x39', '\x2', '\x198', '\x19C', '\x5', 'r', ':', '\x2', '\x199', 
		'\x19C', '\x5', 't', ';', '\x2', '\x19A', '\x19C', '\x5', 'v', '<', '\x2', 
		'\x19B', '\x197', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19E', '\x5', '\x98', 'M', '\x2', '\x19E', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x19F', '\x1A0', '\x5', '\x9A', 'N', '\x2', '\x1A0', 
		's', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', '\x9C', 'O', 
		'\x2', '\x1A2', 'u', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 
		'\x9E', 'P', '\x2', '\x1A4', 'w', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\a', '\x1A', '\x2', '\x2', '\x1A6', '\x1AB', '\x5', 'z', '>', 
		'\x2', '\x1A7', '\x1A8', '\a', '\b', '\x2', '\x2', '\x1A8', '\x1AA', '\x5', 
		'z', '>', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\a', '\x1B', '\x2', '\x2', '\x1AF', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\x5', '|', '?', '\x2', '\x1B1', '\x1B2', 
		'\a', '\x18', '\x2', '\x2', '\x1B2', '\x1B3', '\x5', '~', '@', '\x2', 
		'\x1B3', '{', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\a', '\"', 
		'\x2', '\x2', '\x1B5', '}', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x5', '\x80', '\x41', '\x2', '\x1B7', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1C0', '\x5', '\x82', '\x42', '\x2', '\x1B9', '\x1C0', '\x5', 
		'\x84', '\x43', '\x2', '\x1BA', '\x1C0', '\x5', '\x8A', '\x46', '\x2', 
		'\x1BB', '\x1C0', '\x5', '\x90', 'I', '\x2', '\x1BC', '\x1C0', '\x5', 
		'\x92', 'J', '\x2', '\x1BD', '\x1C0', '\x5', '\x94', 'K', '\x2', '\x1BE', 
		'\x1C0', '\x5', '\x96', 'L', '\x2', '\x1BF', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\a', '\x14', '\x2', 
		'\x2', '\x1C2', '\x1C5', '\x5', '\x80', '\x41', '\x2', '\x1C3', '\x1C4', 
		'\a', '\b', '\x2', '\x2', '\x1C4', '\x1C6', '\x5', '\x80', '\x41', '\x2', 
		'\x1C5', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CA', '\a', '\x15', '\x2', '\x2', '\x1CA', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '\xF', '\x2', '\x2', 
		'\x1CC', '\x1CF', '\x5', '\x86', '\x44', '\x2', '\x1CD', '\x1CE', '\a', 
		' ', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', '\x88', '\x45', '\x2', '\x1CF', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\x85', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\a', '$', '\x2', '\x2', '\x1D2', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D4', '\a', '\"', '\x2', '\x2', '\x1D4', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5', '\x1D6', '\a', '\xF', '\x2', '\x2', '\x1D6', '\x1D9', 
		'\x5', '\x8C', 'G', '\x2', '\x1D7', '\x1D8', '\a', ' ', '\x2', '\x2', 
		'\x1D8', '\x1DA', '\x5', '\x8E', 'H', '\x2', '\x1D9', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\a', '!', '\x2', 
		'\x2', '\x1DC', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\a', '\"', '\x2', '\x2', '\x1DE', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E0', '\x5', '\x98', 'M', '\x2', '\x1E0', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1', '\x1E2', '\x5', '\x9A', 'N', '\x2', '\x1E2', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '\x9C', 'O', '\x2', 
		'\x1E4', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\x5', 
		'\x9E', 'P', '\x2', '\x1E6', '\x97', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\a', ')', '\x2', '\x2', '\x1E8', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EB', '\a', '\x1C', '\x2', '\x2', '\x1EA', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', 
		'!', '\x2', '\x2', '\x1ED', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1F0', '\a', '\x1C', '\x2', '\x2', '\x1EF', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '!', '\x2', '\x2', 
		'\x1F2', '\x1F3', '\a', ' ', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '!', 
		'\x2', '\x2', '\x1F4', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', 
		'\t', '\x4', '\x2', '\x2', '\x1F6', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'(', '\xA7', '\xAA', '\xB5', '\xB9', '\xBF', '\xCF', '\xD7', '\xE2', '\xE6', 
		'\xEA', '\xEE', '\xF5', '\xF8', '\xFF', '\x10A', '\x10E', '\x111', '\x115', 
		'\x11B', '\x129', '\x142', '\x153', '\x159', '\x163', '\x169', '\x16D', 
		'\x177', '\x180', '\x185', '\x18E', '\x19B', '\x1AB', '\x1BF', '\x1C7', 
		'\x1CF', '\x1D9', '\x1EA', '\x1EF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
